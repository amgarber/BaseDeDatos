<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MovieWeb</title>
    <link rel="stylesheet" href="/styles/search_keyword.css">
</head>
<body>
<div class="aura-background"></div>
<div class="main-content">
    <h1 class="title">MovieWeb</h1>
    <form action="/buscar" method="GET" class="search-form" id="form">
        <input type="text" name="q" placeholder="Search by keyword..." id="input" autocomplete="off" />
        <button type="button" id="search-btn">Search</button>
    </form>
    <div id="results"></div>
    <div class="home-button">
        <button onclick="window.location.href = '/'">Home</button>
    </div>
</div>

<script>
    const form = document.getElementById("form");
    const input = document.getElementById("input");
    const results = document.getElementById("results");
    let selectedIndex = -1;
    form.addEventListener("submit", (ev) => {
        ev.preventDefault();
        realizarBusqueda();
    });

    // Función para manejar la búsqueda al hacer clic en el botón o presionar Enter
    function realizarBusqueda() {
        const query = input.value.trim();
        if (query) {
            window.location.href = `/keyword/${encodeURIComponent(query)}`;
        }
    }

    // Llamada de autocompletar al escribir en el input
    input.addEventListener("input", () => {
        if (input.value.length === 0) {
            results.replaceChildren();  // Limpiar resultados si el input está vacío
            return;
        }
    // Llamada a la API para autocompletar
        fetch(`/api/autocomplete?q=${encodeURIComponent(input.value)}`)
            .then(response => response.json())
            .then(result => {
                results.replaceChildren();  // Limpiar resultados anteriores
                selectedIndex = -1;  // Reiniciar el índice seleccionado
                result.forEach((keyword, index) => {
                    const div = document.createElement("div");
                    div.className = "result-item";
                    div.textContent = keyword.keyword_name;
                    div.dataset.index = index;
                    // Redireccionar a la página de resultados al hacer clic
                    div.addEventListener("click", () => {
                        window.location.href = `/keyword/${keyword.keyword_name}`;
                    });
                    results.appendChild(div);
                });
            })
            .catch(error => {
                console.error("Error al obtener las sugerencias de búsqueda:", error);
            });
    });
    // Manejo de las teclas de flecha
    input.addEventListener("keydown", (ev) => {
        const items = Array.from(results.children);
        if (ev.key === "ArrowDown") {
            ev.preventDefault();
            if (selectedIndex < items.length - 1) {
                selectedIndex++;
            }
            updateSelection(items);
        } else if (ev.key === "ArrowUp") {
            ev.preventDefault();
            if (selectedIndex > 0) {
                selectedIndex--;
            }
            updateSelection(items);
        } else if (ev.key === "Enter" && selectedIndex >= 0) {
            ev.preventDefault();
            items[selectedIndex].click();  // Redirigir al hacer Enter sobre la sugerencia seleccionada
        }
    });
    // Función para resaltar el elemento seleccionado
    function updateSelection(items) {
        items.forEach((item, index) => {
            item.classList.toggle("selected", index === selectedIndex);
            if (index === selectedIndex) {
                input.value = item.textContent;  // Actualizar el valor del input con la selección
            }
        });
    }
    document.getElementById("search-btn").addEventListener("click", () => {
        const query = input.value;
        if (query) {
            window.location.href = `/keyword/${query}`;
        }
    });
</script>
</body>
</html>
